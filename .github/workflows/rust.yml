name: build

on:
  push:

permissions:
  contents: write

jobs:
  build:
    name: ${{ matrix.platform.os_name }} with rust ${{ matrix.toolchain }}
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os_name: Linux-x86_64
            target: x86_64-unknown-linux-gnu
            bin: MikuMikuLoader-linux-amd64
          - os_name: Windows-x86_64
            target: x86_64-pc-windows-msvc
            bin: MikuMikuLoader-amd64.exe
          - os_name: macOS-x86_64
            target: x86_64-apple-darwin
            bin: MikuMikuLoader-macos-amd64
        toolchain:
          - nightly

    steps:
      - uses: actions/checkout@v3

      - name: Install cargo-xwin (Windows only)
        if: matrix.platform.os_name == 'Windows-x86_64'
        run: |
          cargo install --locked cargo-xwin
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Set up osxcross (macOS only)
        if: matrix.platform.os_name == 'macOS-x86_64'
        run: |
          echo "/opt/osxcross/target/bin" >> $GITHUB_PATH
          echo "OSXCROSS_MP_INC=1" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=10.13" >> $GITHUB_ENV

          echo "CC=x86_64-apple-darwin24.5-clang" >> $GITHUB_ENV
          echo "CXX=x86_64-apple-darwin24.5-clang++" >> $GITHUB_ENV
          echo "AR=x86_64-apple-darwin24.5-ar" >> $GITHUB_ENV
          echo "RANLIB=x86_64-apple-darwin24.5-ranlib" >> $GITHUB_ENV
          echo "CFLAGS=--target=x86_64-apple-darwin -fuse-ld=lld" >> $GITHUB_ENV
          echo "LDFLAGS=-fuse-ld=lld" >> $GITHUB_ENV



      - name: Add Rust target
        run: rustup target add ${{ matrix.platform.target }}

      - name: Configure Cargo for macOS (only)
        if: matrix.platform.os_name == 'macOS-x86_64'
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml <<EOF
          [target.${{ matrix.platform.target }}]
          linker = "x86_64-apple-darwin20-clang"
          EOF

      - name: Build with appropriate toolchain
        run: |
          case "${{ matrix.platform.os_name }}" in
            Windows-x86_64)
              cargo xwin build --target ${{ matrix.platform.target }} --release --locked
              ;;
            *)
              cargo build --target ${{ matrix.platform.target }} --release --locked
              ;;
          esac

      - name: Rename binary
        run: |
          case "${{ matrix.platform.os_name }}" in
            Windows-x86_64)
              mv target/${{ matrix.platform.target }}/release/MikuMikuLoader.exe target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}
              ;;
            *)
              mv target/${{ matrix.platform.target }}/release/MikuMikuLoader target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}
              ;;
          esac

      - name: Generate SHA-256
        run: |
          FILE=target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}
          shasum -a 256 "$FILE" | cut -d ' ' -f 1 > "$FILE.sha256"

      - name: Upload binary and SHA-256 checksum as build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.target }}-artifacts
          path: |
            target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}
            target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}.sha256
